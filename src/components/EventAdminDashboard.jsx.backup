"use client";
import React, { useState, useEffect } from 'react';
import Link from 'next/link';
import API_CONFIG from '../config/api';

// Funci√≥n para determinar el estado del evento seg√∫n la hora actual
const getEventStatus = (event) => {
  if (!event?.informacionGeneral?.fechaEvento || !event?.informacionGeneral?.horaInicio || !event?.informacionGeneral?.horaTermino) {
    return { status: 'programado', message: 'Evento programado', color: '#3B82F6' };
  }

  const now = new Date();
  
  // Crear fecha del evento en formato local (YYYY-MM-DD)
  const eventDateString = event.informacionGeneral.fechaEvento; // "2025-09-03"
  const [year, month, day] = eventDateString.split('-');
  const eventDate = new Date(parseInt(year), parseInt(month) - 1, parseInt(day));
  
  // Crear fecha de hoy en formato local (sin horas)
  const today = new Date();
  const todayDate = new Date(today.getFullYear(), today.getMonth(), today.getDate());
  const eventDateOnly = new Date(eventDate.getFullYear(), eventDate.getMonth(), eventDate.getDate());
  
  console.log('üîç DEBUG - Event date string:', eventDateString);
  console.log('üîç DEBUG - Today date:', todayDate.toDateString());
  console.log('üîç DEBUG - Event date only:', eventDateOnly.toDateString());
  console.log('üîç DEBUG - Are dates equal?', eventDateOnly.getTime() === todayDate.getTime());
  console.log('üîç DEBUG - Current time:', now.toISOString());
  console.log('üîç DEBUG - Event times:', event.informacionGeneral.horaInicio, 'to', event.informacionGeneral.horaTermino);
  
  // Si no es el d√≠a del evento
  if (eventDateOnly.getTime() !== todayDate.getTime()) {
    if (eventDateOnly > todayDate) {
      return { status: 'programado', message: 'Evento programado', color: '#3B82F6' };
    } else {
      return { status: 'realizado', message: 'Evento realizado', color: '#6B7280' };
    }
  }

  // Es el d√≠a del evento, verificar horas
  const startTime = new Date(`${eventDateString}T${event.informacionGeneral.horaInicio}:00`);
  const endTime = new Date(`${eventDateString}T${event.informacionGeneral.horaTermino}:00`);

  if (now < startTime) {
    // Evento por comenzar - calcular tiempo restante
    const timeDiff = startTime - now;
    const hours = Math.floor(timeDiff / (1000 * 60 * 60));
    const minutes = Math.floor((timeDiff % (1000 * 60 * 60)) / (1000 * 60));
    
    let message, timeText;
    if (minutes < 1 && hours === 0) {
      message = 'Evento comenzar√° en menos de 1 min.';
      timeText = 'menos de 1 min.';
    } else {
      timeText = `${hours}h ${minutes}m`;
      message = `Evento comenzar√° en ${timeText}`;
    }
    
    return {
      status: 'por_comenzar',
      message,
      timeText,
      color: '#EF4444',
      timeDiff
    };
  } else if (now >= startTime && now <= endTime) {
    return { status: 'en_curso', message: 'Evento en curso', color: '#10B981' };
  } else {
    return { status: 'finalizado', message: 'Evento finalizado', color: '#3B82F6' };
  }
};
import {
  Box,
  Typography,
  IconButton,
  Stack,
  Avatar,
  Select,
  MenuItem,
  FormControl,
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  Button,
  Paper,
  Tabs,
  Tab
} from '@mui/material';
import {
  Search as SearchIcon,
  Notifications as NotificationsIcon,
  Menu as MenuIcon,
  Dashboard as DashboardIcon,
  People as PeopleIcon,
  Inventory as InventoryIcon,
  KeyboardArrowDown as KeyboardArrowDownIcon,
  ChevronLeft as ChevronLeftIcon,
  ChevronRight as ChevronRightIcon,
  Edit as EditIcon,
  AttachMoney as AttachMoneyIcon,
  Description as DescriptionIcon,
  Person as PersonIcon,
  Share as ShareIcon,
  Add as AddIcon
} from '@mui/icons-material';
import Usuarios from './Usuarios';
import AddUserForm from './AddUserForm';
import Inventario from './Inventario';
import AddInventoryForm from './AddInventoryForm';

const CalendarComponent = ({ selectedEventId }) => {
  const [currentDate, setCurrentDate] = useState(new Date());
  const [eventDate, setEventDate] = useState(null);

  useEffect(() => {
    if (selectedEventId) {
      fetchEventDate();
    }
  }, [selectedEventId]);

  const fetchEventDate = async () => {
    try {
      const response = await fetch(API_CONFIG.ENDPOINTS.EVENT_BY_ID(selectedEventId), API_CONFIG.REQUEST_CONFIG);
      const eventData = await response.json();
      
      const actualEventData = eventData.data?.event || eventData.data || eventData;
      
      let eventDateString = null;
      
      if (actualEventData.informacionGeneral) {
        eventDateString = actualEventData.informacionGeneral.fechaEvento;
      }
      
      if (!eventDateString) {
        eventDateString = actualEventData.informacionGeneral?.fechaInicio || 
                         actualEventData.informacionGeneral?.fecha || 
                         actualEventData.fechaInicio || 
                         actualEventData.fecha;
      }
      
      if (eventDateString) {
        const eventDateObj = new Date(eventDateString);
        setEventDate(eventDateObj);
        setCurrentDate(eventDateObj);
      }
    } catch (error) {
      console.error('Error fetching event date:', error);
    }
  };

  const monthNames = [
    'Enero', 'Febrero', 'Marzo', 'Abril', 'Mayo', 'Junio',
    'Julio', 'Agosto', 'Septiembre', 'Octubre', 'Noviembre', 'Diciembre'
  ];

  const dayNames = ['Lun', 'Mar', 'Mie', 'Jue', 'Vie', 'Sab', 'Dom'];

  const getDaysInMonth = (date) => {
    const year = date.getFullYear();
    const month = date.getMonth();
    const firstDay = new Date(year, month, 1);
    const lastDay = new Date(year, month + 1, 0);
    const daysInMonth = lastDay.getDate();
    const startingDayOfWeek = (firstDay.getDay() + 6) % 7;

    const days = [];
    
    const prevMonth = new Date(year, month - 1, 0);
    for (let i = startingDayOfWeek - 1; i >= 0; i--) {
      days.push({
        day: prevMonth.getDate() - i,
        isCurrentMonth: false,
        isEventDay: false
      });
    }
    
    for (let day = 1; day <= daysInMonth; day++) {
      const dayDate = new Date(year, month, day);
      const isEventDay = eventDate && 
        dayDate.getDate() === eventDate.getDate() &&
        dayDate.getMonth() === eventDate.getMonth() &&
        dayDate.getFullYear() === eventDate.getFullYear();
      
      days.push({
        day,
        isCurrentMonth: true,
        isEventDay
      });
    }
    
    const remainingDays = 42 - days.length;
    for (let day = 1; day <= remainingDays; day++) {
      days.push({
        day,
        isCurrentMonth: false,
        isEventDay: false
      });
    }
    
    return days;
  };

  const navigateMonth = (direction) => {
    setCurrentDate(prevDate => {
      const newDate = new Date(prevDate);
      newDate.setMonth(prevDate.getMonth() + direction);
      return newDate;
    });
  };

  const days = getDaysInMonth(currentDate);

  return (
    <Box sx={{ width: '100%', display: 'flex', flexDirection: 'column', pb: 1.5 }}>
      <Stack direction="row" alignItems="center" justifyContent="space-between" sx={{ mb: 1.5 }}>
        <IconButton onClick={() => navigateMonth(-1)} size="small" sx={{ p: 0.5 }}>
          <ChevronLeftIcon sx={{ fontSize: 16 }} />
        </IconButton>
        <Typography variant="body1" sx={{ color: '#374151', fontWeight: 600, fontSize: '14px' }}>
          {monthNames[currentDate.getMonth()]} de {currentDate.getFullYear()}
        </Typography>
        <IconButton onClick={() => navigateMonth(1)} size="small" sx={{ p: 0.5 }}>
          <ChevronRightIcon sx={{ fontSize: 16 }} />
        </IconButton>
      </Stack>

      <Stack direction="row" sx={{ mb: 1 }}>
        {dayNames.map((day) => (
          <Box key={day} sx={{ flex: 1, textAlign: 'center', py: 0.5 }}>
            <Typography variant="caption" sx={{ color: '#6B7280', fontWeight: 600, fontSize: '12px' }}>
              {day}
            </Typography>
          </Box>
        ))}
      </Stack>

      <Box sx={{ 
        display: 'grid', 
        gridTemplateColumns: 'repeat(7, 1fr)', 
        gap: 0.5,
        pb: 3
      }}>
        {days.map((dayData, index) => (
          <Box
            key={index}
            sx={{
              display: 'flex',
              alignItems: 'center',
              justifyContent: 'center',
              borderRadius: '50%',
              cursor: 'pointer',
              bgcolor: dayData.isEventDay ? '#3B82F6' : 'transparent',
              color: dayData.isEventDay ? 'white' : 
                     dayData.isCurrentMonth ? '#374151' : '#9CA3AF',
              fontWeight: dayData.isEventDay ? 700 : 400,
              minHeight: 32,
              '&:hover': {
                bgcolor: dayData.isEventDay ? '#2563EB' : '#F3F4F6'
              }
            }}
          >
            <Typography variant="body2" sx={{ fontSize: '14px' }}>
              {dayData.day}
            </Typography>
          </Box>
        ))}
      </Box>
    </Box>
  );
};

const EventAdminDashboard = () => {
  const [activeView, setActiveView] = useState('dashboard');
  const [selectedEventId, setSelectedEventId] = useState('');
  const [mounted, setMounted] = useState(false);
  
  const [events, setEvents] = useState([]);
  const [eventsLoading, setEventsLoading] = useState(false);
  const [eventSearchTerm, setEventSearchTerm] = useState('');
  
  const [showAddInventoryForm, setShowAddInventoryForm] = useState(false);
  const [showAddUserForm, setShowAddUserForm] = useState(false);
  const [showEditUserForm, setShowEditUserForm] = useState(false);
  const [editingUser, setEditingUser] = useState(null);
  const [showEditInventoryForm, setShowEditInventoryForm] = useState(false);
  const [editingInventory, setEditingInventory] = useState(null);
  const [userFormData, setUserFormData] = useState({
    nombreCompleto: '',
    correoElectronico: '',
    rutOId: '',
    telefonoContacto: '',
    rol: 'Administrador'
  });
  const [createUserLoading, setCreateUserLoading] = useState(false);
  const [showUserSuccessModal, setShowUserSuccessModal] = useState(false);
  const [createdUserName, setCreatedUserName] = useState('');
  const [showUserErrorModal, setShowUserErrorModal] = useState(false);
  const [userErrorMessage, setUserErrorMessage] = useState('');
  

  const [inventoryFormData, setInventoryFormData] = useState({
    nombreProducto: '',
    categoria: '',
    descripcion: '',
    skuCodigoInterno: '',
    precioVenta: '',
    stockInicialDisponible: '',
    imagenProducto: null
  });
  const [createInventoryLoading, setCreateInventoryLoading] = useState(false);


  const fetchEvents = async () => {
    try {
      setEventsLoading(true);
      
      const response = await fetch(`${API_CONFIG.ENDPOINTS.EVENTS}?limit=900`, API_CONFIG.REQUEST_CONFIG);
      const result = await response.json();
      
      if (response.ok && result.status === 'success') {
        const eventsList = result.data.events || [];
        setEvents(eventsList);
        
        // Don't automatically select the first event - let user choose
      } else {
        console.error('‚ùå API Error:', result.message);
      }
    } catch (err) {
      console.error('üí• Error fetching events:', err);
    } finally {
      setEventsLoading(false);
    }
  };


  const handleUserFormChange = (field, value) => {
    setUserFormData(prev => ({
      ...prev,
      [field]: value
    }));
  };


  const createUser = async () => {
    try {
      setCreateUserLoading(true);
      

      const userDataWithEvent = {
        ...userFormData,
        eventoId: selectedEventId
      };
      
      const response = await fetch(API_CONFIG.ENDPOINTS.USERS, {
        method: 'POST',
        headers: {
          ...API_CONFIG.REQUEST_CONFIG.headers,
        },
        body: JSON.stringify(userDataWithEvent),
      });

      const result = await response.json();
      
      if (response.ok && result.status === 'success') {
        setCreatedUserName(userFormData.nombreCompleto);
        setUserFormData({
          nombreCompleto: '',
          correoElectronico: '',
          rutOId: '',
          telefonoContacto: '',
          rol: 'Administrador'
        });
        setShowAddUserForm(false);
        setShowUserSuccessModal(true);
      } else {
        throw new Error(result.message || 'Error al crear el usuario');
      }
    } catch (error) {
      console.error('‚ùå Error al crear usuario:', error);
      setUserErrorMessage(error.message);
      setShowUserErrorModal(true);
    } finally {
      setCreateUserLoading(false);
    }
  };


  const handleEditUser = (usuario) => {
    setEditingUser(usuario);
    setUserFormData({
      nombreCompleto: usuario.nombreCompleto || '',
      correoElectronico: usuario.correoElectronico || '',
      rutOId: usuario.rutOId || '',
      telefonoContacto: usuario.telefonoContacto || '',
      rol: usuario.rol || 'Administrador'
    });
    setShowEditUserForm(true);
  };


  const updateUser = async () => {
    try {
      setCreateUserLoading(true);
      
      const response = await fetch(API_CONFIG.ENDPOINTS.USER_BY_ID(editingUser._id || editingUser.id), {
        method: 'PUT',
        headers: {
          ...API_CONFIG.REQUEST_CONFIG.headers,
        },
        body: JSON.stringify(userFormData),
      });

      const result = await response.json();
      
      if (response.ok && result.status === 'success') {
        setUserFormData({
          nombreCompleto: '',
          correoElectronico: '',
          rutOId: '',
          telefonoContacto: '',
          rol: 'Administrador'
        });
        setShowEditUserForm(false);
        setEditingUser(null);
      } else {
        throw new Error(result.message || 'Error al actualizar el usuario');
      }
    } catch (error) {
      console.error('‚ùå Error al actualizar usuario:', error);
      setUserErrorMessage(error.message);
      setShowUserErrorModal(true);
    } finally {
      setCreateUserLoading(false);
    }
  };


  const handleInventoryFormChange = (field, value) => {
    setInventoryFormData(prev => ({
      ...prev,
      [field]: value
    }));
  };


  const handleEditInventory = (item) => {
    setEditingInventory(item);
    setInventoryFormData({
      nombreProducto: item.nombre || item.nombreProducto || '',
      categoria: item.categoria || '',
      descripcion: item.descripcion || '',
      skuCodigoInterno: item.sku || '',
      precioVenta: item.precio || item.precioVenta || '',
      stockInicialDisponible: item.stock?.actual || item.stockActual || '',
      imagenProducto: item.imagen ? { name: 'imagen_actual.jpg', url: item.imagen } : null
    });
    setShowEditInventoryForm(true);
  };


  const updateInventory = async () => {
    try {
      setCreateInventoryLoading(true);
      
      const response = await fetch(API_CONFIG.ENDPOINTS.INVENTORY_BY_ID(editingInventory.id || editingInventory._id), {
        method: 'PUT',
        headers: {
          ...API_CONFIG.REQUEST_CONFIG.headers,
        },
        body: JSON.stringify({
          nombreProducto: inventoryFormData.nombreProducto,
          categoria: inventoryFormData.categoria,
          descripcion: inventoryFormData.descripcion,
          sku: inventoryFormData.skuCodigoInterno,
          precioVenta: parseInt(inventoryFormData.precioVenta) || 0,
          stockInicial: parseInt(inventoryFormData.stockInicialDisponible) || 0,
          imagen: inventoryFormData.imagenProducto?.url || null
        }),
      });

      const result = await response.json();
      
      if (response.ok && result.status === 'success') {
        
        setInventoryFormData({
          nombreProducto: '',
          categoria: '',
          descripcion: '',
          skuCodigoInterno: '',
          precioVenta: '',
          stockInicialDisponible: '',
          imagenProducto: null
        });
        
        setShowEditInventoryForm(false);
        setEditingInventory(null);
        

      } else {
        throw new Error(result.message || 'Error al actualizar el producto');
      }
    } catch (error) {
      console.error('‚ùå Error al actualizar producto:', error);
      console.error('Error al actualizar producto:', error.message);
    } finally {
      setCreateInventoryLoading(false);
    }
  };

  useEffect(() => {
    setMounted(true);
    fetchEvents();
  }, []);

  if (!mounted) {
    return null;
  }


  const selectedEvent = events.find(event => event.id === selectedEventId);
  const selectedEventName = selectedEvent?.informacionGeneral?.nombreEvento || 'Seleccione evento';
  
  // Formatear el nombre del evento seleccionado con fecha
  const getSelectedEventDisplayName = () => {
    if (!selectedEvent) return 'Seleccione evento';
    
    const eventName = selectedEvent.informacionGeneral?.nombreEvento || 'Evento sin nombre';
    const eventDate = selectedEvent.informacionGeneral?.fechaEvento;
    
    if (eventDate) {
      try {
        // Parsear la fecha como local para evitar problemas de timezone
        const [year, month, day] = eventDate.split('-');
        const date = new Date(parseInt(year), parseInt(month) - 1, parseInt(day));
        const dayNum = date.getDate();
        const monthName = date.toLocaleDateString('es-CL', { month: 'short' });
        const yearNum = date.getFullYear();
        const formattedDate = `${dayNum} de ${monthName} de ${yearNum}`;
        return `${eventName} / ${formattedDate}`;
      } catch (error) {
        console.error('Error formatting selected event date:', error);
        return eventName;
      }
    }
    
    return eventName;
  };

  // Componente Header limpio con Material-UI
  const Header = () => (
    <Box sx={{
      width: '100%',
      bgcolor: '#1B2735',
      boxShadow: '0px 2px 8px rgba(0, 0, 0, 0.15)'
    }}>

      <Box sx={{
        display: 'flex',
        alignItems: 'center',
        justifyContent: 'space-between',
        px: 3,
        py: 2
      }}>

        <Box sx={{ display: 'flex', alignItems: 'center', gap: 3 }}>
          <Link href="/" style={{ textDecoration: 'none' }}>
            <Box sx={{ 
              display: 'flex',
              alignItems: 'center',
              cursor: 'pointer',
              '&:hover': {
                opacity: 0.8
              }
            }}>
              <img 
                src="/vibepass-panel/vibepass.svg" 
                alt="VibePass" 
                style={{ 
                  height: '32px', 
                  width: 'auto'
                }} 
              />
            </Box>
          </Link>
          

          <Tabs 
            value={activeView} 
            onChange={(e, newValue) => setActiveView(newValue)}
            sx={{
              '& .MuiTab-root': {
                color: '#B0BEC5',
                textTransform: 'none',
                fontWeight: 500,
                minHeight: '48px',
                '&.Mui-selected': {
                  color: 'white',
                  bgcolor: 'rgba(255, 255, 255, 0.1)',
                  borderRadius: '8px'
                }
              },
              '& .MuiTabs-indicator': {
                display: 'none'
              }
            }}
          >
            <Tab 
              value="dashboard" 
              label={
                <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
                  <DashboardIcon fontSize="small" />
                  Dashboard
                </Box>
              }
            />
            <Tab 
              value="usuarios" 
              label={
                <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
                  <PeopleIcon fontSize="small" />
                  Usuarios
                </Box>
              }
            />
            <Tab 
              value="inventario" 
              label={
                <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
                  <InventoryIcon fontSize="small" />
                  Inventario
                </Box>
              }
            />
          </Tabs>
        </Box>


        <Stack direction="row" alignItems="center" spacing={2}>
          <IconButton sx={{ 
            color: 'white',
            '&:hover': {
              backgroundColor: 'rgba(255, 255, 255, 0.1)'
            }
          }}>
            <SearchIcon />
          </IconButton>

          <IconButton sx={{ 
            color: 'white',
            '&:hover': {
              backgroundColor: 'rgba(255, 255, 255, 0.1)'
            }
          }}>
            <NotificationsIcon />
          </IconButton>

          <Stack direction="row" alignItems="center" spacing={1.5} sx={{ ml: 2 }}>
            <Avatar 
              sx={{ 
                width: 40, 
                height: 40,
                bgcolor: '#00BCD4',
                fontSize: '16px',
                fontWeight: 600
              }}
            >
              JO
            </Avatar>
            <Box>
              <Typography sx={{
                color: 'white',
                fontSize: '14px',
                fontWeight: 600,
                lineHeight: 1.2
              }}>
                Jos√© Ortiz
              </Typography>
              <Typography sx={{
                color: '#B0BEC5',
                fontSize: '12px',
                lineHeight: 1.2
              }}>
                Administrador
              </Typography>
            </Box>
          </Stack>

          <IconButton sx={{ 
            color: 'white',
            ml: 1,
            '&:hover': {
              backgroundColor: 'rgba(255, 255, 255, 0.1)'
            }
          }}>
            <MenuIcon />
          </IconButton>
        </Stack>
      </Box>
    </Box>
  );

  // Function to determine event status
  const getEventStatusForDropdown = (event) => {
    if (!event?.informacionGeneral) {
      return { status: 'borrador', label: 'Borrador', color: '#6B7280' };
    }

    // Check if it's cancelled
    if (event.informacionGeneral.estado === 'cancelado') {
      return { status: 'cancelado', label: 'Cancelado', color: '#EF4444' };
    }

    // Check if it's a draft (no complete information)
    if (!event.informacionGeneral.fechaEvento || !event.informacionGeneral.horaInicio) {
      return { status: 'borrador', label: 'Borrador', color: '#6B7280' };
    }

    const now = new Date();
    const [year, month, day] = event.informacionGeneral.fechaEvento.split('-');
    const eventDate = new Date(parseInt(year), parseInt(month) - 1, parseInt(day));
    
    // Create today's date for comparison
    const today = new Date();
    const todayDate = new Date(today.getFullYear(), today.getMonth(), today.getDate());
    const eventDateOnly = new Date(eventDate.getFullYear(), eventDate.getMonth(), eventDate.getDate());
    
    // If not today
    if (eventDateOnly.getTime() !== todayDate.getTime()) {
      if (eventDateOnly > todayDate) {
        return { status: 'programado', label: 'Programado', color: '#3B82F6' };
      } else {
        return { status: 'finalizado', label: 'Finalizado', color: '#6B7280' };
      }
    }

    // It's today, check times
    const startTime = new Date(`${event.informacionGeneral.fechaEvento}T${event.informacionGeneral.horaInicio}:00`);
    const endTime = event.informacionGeneral.horaTermino ? 
      new Date(`${event.informacionGeneral.fechaEvento}T${event.informacionGeneral.horaTermino}:00`) : 
      new Date(startTime.getTime() + 4 * 60 * 60 * 1000); // Default 4 hours if no end time

    if (now < startTime) {
      return { status: 'programado', label: 'Programado', color: '#3B82F6' };
    } else if (now >= startTime && now <= endTime) {
      return { status: 'activo', label: 'Activo', color: '#10B981' };
    } else {
      return { status: 'finalizado', label: 'Finalizado', color: '#6B7280' };
    }
  };

  // Sort events by status priority and then filter by search term
  const sortedAndFilteredEvents = events
    .map(event => ({
      ...event,
      statusInfo: getEventStatusForDropdown(event)
    }))
    .sort((a, b) => {
      // Define priority order
      const statusPriority = {
        'activo': 1,
        'programado': 2,
        'borrador': 3,
        'finalizado': 4,
        'cancelado': 5
      };
      
      const priorityA = statusPriority[a.statusInfo.status] || 6;
      const priorityB = statusPriority[b.statusInfo.status] || 6;
      
      if (priorityA !== priorityB) {
        return priorityA - priorityB;
      }
      
      // If same status, sort by date (closest first for programmed, most recent first for others)
      if (a.statusInfo.status === 'programado' && b.statusInfo.status === 'programado') {
        const dateA = new Date(a.informacionGeneral?.fechaEvento || '9999-12-31');
        const dateB = new Date(b.informacionGeneral?.fechaEvento || '9999-12-31');
        return dateA - dateB; // Ascending for programmed (closest first)
      } else {
        const dateA = new Date(a.informacionGeneral?.fechaEvento || '1900-01-01');
        const dateB = new Date(b.informacionGeneral?.fechaEvento || '1900-01-01');
        return dateB - dateA; // Descending for others (most recent first)
      }
    })
    .filter(event => {
      if (!eventSearchTerm) return true;
      const eventName = event.informacionGeneral?.nombreEvento || '';
      return eventName.toLowerCase().includes(eventSearchTerm.toLowerCase());
    });

  // For backward compatibility, keep filteredEvents as the final result
  const filteredEvents = sortedAndFilteredEvents;

  // Componente Event Selector (debajo del header) - Con b√∫squeda y scroll
  const EventSelector = () => (
    <Box sx={{
      width: '100%',
      bgcolor: '#F5F7FA',
      borderBottom: '1px solid #E5E7EB',
      px: 3,
      py: 2
    }}>
      <Box sx={{
        display: 'flex',
        alignItems: 'center',
        justifyContent: 'space-between',
        maxWidth: '1200px',
        mx: 'auto'
      }}>

        <Box sx={{ 
          minWidth: 250,
          height: 40,
          backgroundColor: 'transparent',
          borderRadius: '8px',
          display: 'flex',
          alignItems: 'center',
          px: 2,
          cursor: 'pointer',
          position: 'relative'
        }}>
          <FormControl fullWidth>
            <Select
            value={selectedEventId}
            onChange={(e) => setSelectedEventId(e.target.value)}
              disabled={eventsLoading || events.length === 0}
              variant="standard"
              disableUnderline
              displayEmpty
              renderValue={(value) => {
                if (!value) {
                  return <Typography sx={{ color: '#6B7280', fontStyle: 'italic' }}>Seleccione evento</Typography>;
                }
                return getSelectedEventDisplayName();
              }}
              MenuProps={{
                PaperProps: {
                  sx: {
                    maxHeight: events.length > 6 ? 300 : 'auto',
                    '& .MuiMenuItem-root': {
                      fontSize: '14px'
                    }
                  }
                }
              }}
              sx={{
                color: '#374151 !important',
                fontSize: '14px',
                fontWeight: 600,
                '& .MuiSelect-select': {
                  color: '#374151 !important',
                  backgroundColor: 'transparent !important',
                  padding: '8px 30px 8px 0 !important',
                  textAlign: 'left !important'
                },
                '& .MuiSelect-icon': {
                  color: '#374151 !important'
                },
                '& .MuiInputBase-input': {
                  color: '#374151 !important',
                  textAlign: 'left !important'
                },
                '&:before': {
                  borderBottom: 'none !important'
                },
                '&:after': {
                  borderBottom: 'none !important'
                },
                '&:hover:not(.Mui-disabled):before': {
                  borderBottom: 'none !important'
                }
              }}
              IconComponent={KeyboardArrowDownIcon}
            >
              {/* Default option */}
              <MenuItem value="" disabled>
                <Typography sx={{ color: '#6B7280', fontStyle: 'italic' }}>
                  Seleccione evento
                </Typography>
              </MenuItem>

              {/* Search input when more than 6 events */}
              {events.length > 6 && (
                <Box sx={{ px: 2, py: 1, borderBottom: '1px solid #E5E7EB' }}>
                  <input
                    type="text"
                    placeholder="Buscar evento..."
                    value={eventSearchTerm}
                    onChange={(e) => {
                      e.stopPropagation();
                      setEventSearchTerm(e.target.value);
                    }}
                    onClick={(e) => e.stopPropagation()}
                    style={{
                      width: '100%',
                      padding: '8px 12px',
                      border: '1px solid #D1D5DB',
                      borderRadius: '6px',
                      fontSize: '14px',
                      outline: 'none',
                      backgroundColor: '#F9FAFB'
                    }}
                  />
                </Box>
              )}

              {eventsLoading ? (
                <MenuItem disabled>
                  <Typography sx={{ color: '#6B7280' }}>
                    Cargando eventos...
                  </Typography>
                </MenuItem>
              ) : filteredEvents.length === 0 ? (
                <MenuItem disabled>
                  <Typography sx={{ color: '#6B7280' }}>
                    {eventSearchTerm ? 'No se encontraron eventos' : 'No hay eventos disponibles'}
                  </Typography>
                </MenuItem>
              ) : (
                filteredEvents.map((event) => {
                  const eventName = event.informacionGeneral?.nombreEvento || 'Evento sin nombre';
                  const eventDate = event.informacionGeneral?.fechaEvento;
                  
                  let formattedDate = '';
                  if (eventDate) {
                    try {
                      // Parsear la fecha como local para evitar problemas de timezone
                      const [year, month, day] = eventDate.split('-');
                      const date = new Date(parseInt(year), parseInt(month) - 1, parseInt(day));
                      const dayNum = date.getDate();
                      const monthName = date.toLocaleDateString('es-CL', { month: 'short' });
                      const yearNum = date.getFullYear();
                      formattedDate = `${dayNum} de ${monthName} de ${yearNum}`;
                    } catch (error) {
                      console.error('Error formatting date:', error);
                    }
                  }
                  
                  const displayText = formattedDate ? `${eventName} / ${formattedDate}` : eventName;
                  const statusInfo = event.statusInfo || getEventStatusForDropdown(event);
                  
                  return (
                    <MenuItem 
                      key={event.id} 
                      value={event.id}
                      sx={{
                        '&:hover': {
                          bgcolor: 'rgba(239, 68, 68, 0.1)'
                        },
                        display: 'flex',
                        justifyContent: 'space-between',
                        alignItems: 'center',
                        py: 1.5
                      }}
                    >
                      <Box sx={{ flex: 1, mr: 1 }}>
                        <Typography variant="body2" sx={{ fontSize: '14px' }}>
                      {displayText}
                        </Typography>
                      </Box>
                      <Box
                        sx={{
                          bgcolor: statusInfo.color,
                          color: 'white',
                          px: 1,
                          py: 0.25,
                          borderRadius: '12px',
                          fontSize: '10px',
                          fontWeight: 600,
                          textTransform: 'uppercase',
                          letterSpacing: '0.5px',
                          minWidth: 'fit-content',
                          textAlign: 'center'
                        }}
                      >
                        {statusInfo.label}
                      </Box>
                    </MenuItem>
                  );
                })
              )}
            </Select>
          </FormControl>
        </Box>

        <Typography sx={{
          fontSize: '18px',
          fontWeight: 600,
          color: '#374151'
        }}>
          {selectedEvent ? `Evento - "${getSelectedEventDisplayName()}"` : 'Evento - '}
        </Typography>
      </Box>
    </Box>
  );

    const DashboardView = () => {
         const [dashboardData, setDashboardData] = useState({
      totalVentas: 0,
      ventasDelDia: 0,
      entradasVendidas: 0,
      entradasSummary: { vendidas: 0, disponibles: 0, valorUnitarioPromedio: 0, totalVenta: 0 },
      alimentosBebidasSummary: { vendidas: 0, disponibles: 0, valorUnitarioPromedio: 0, totalVenta: 0 },
      actividadesSummary: { vendidas: 0, disponibles: 0, valorUnitarioPromedio: 0, totalVenta: 0 },
      eventoActivo: 'programado'
    });
    const [loading, setLoading] = useState(true);
    const [currentTime, setCurrentTime] = useState(new Date());
    const [inventory, setInventory] = useState([]);
    const [showAllAgendables, setShowAllAgendables] = useState(false);

    // useEffect para actualizar el tiempo cada 60 segundos si hay eventos activos
    useEffect(() => {
      // Solo actualizar si hay un evento seleccionado y est√° activo o por comenzar
      if (!selectedEvent || !selectedEvent.informacionGeneral?.fechaEvento || !selectedEvent.informacionGeneral?.horaInicio) {
        return;
      }
      
      const eventDateTime = new Date(`${selectedEvent.informacionGeneral.fechaEvento}T${selectedEvent.informacionGeneral.horaInicio}`);
      const now = new Date();
      const timeDiff = eventDateTime.getTime() - now.getTime();
      
      // Evento activo: ya comenz√≥ pero no ha terminado (dentro de las pr√≥ximas 24 horas)
      const isActive = timeDiff <= 0 && timeDiff >= -24 * 60 * 60 * 1000;
      // Evento por comenzar: comenzar√° en las pr√≥ximas 24 horas
      const isUpcoming = timeDiff > 0 && timeDiff <= 24 * 60 * 60 * 1000;
      
      if (!isActive && !isUpcoming) {
        console.log('‚è∏Ô∏è Evento no activo, pausando actualizaciones autom√°ticas');
        return;
      }
      
      console.log('üîÑ Evento activo detectado, iniciando actualizaciones cada 60 segundos');
      
      const timer = setInterval(() => {
        setCurrentTime(new Date());
      }, 60000); // Cada 60 segundos

      return () => {
        clearInterval(timer);
        console.log('‚èπÔ∏è Actualizaciones autom√°ticas detenidas');
      };
    }, [selectedEvent]);

    useEffect(() => {
      if (selectedEventId) {
        fetchDashboardData();
      }
    }, [selectedEventId]);

    // useEffect para recalcular el estado del evento cuando cambie el tiempo
    useEffect(() => {
      if (selectedEvent && dashboardData.eventStatus) {
        const newEventStatus = getEventStatus(selectedEvent);
        
        if (newEventStatus.status !== dashboardData.eventStatus.status || 
            newEventStatus.message !== dashboardData.eventStatus.message) {
          setDashboardData(prev => ({
            ...prev,
            eventoActivo: newEventStatus.status,
            eventStatus: newEventStatus
          }));
        }
      }
    }, [currentTime, selectedEvent]);

    const fetchDashboardData = async () => {
      try {
        setLoading(true);
        
        // Fetch users data
        const usersResponse = await fetch(`${API_CONFIG.ENDPOINTS.USERS}?eventoId=${selectedEventId}`);
        const usersData = await usersResponse.json();
        const users = Array.isArray(usersData) ? usersData : (usersData.data?.users || usersData.data?.items || usersData.users || usersData.data || []);
        
        // Fetch inventory data
        const inventoryResponse = await fetch(`${API_CONFIG.ENDPOINTS.INVENTORY}?eventoId=${selectedEventId}`);
        const inventoryData = await inventoryResponse.json();
        const inventoryArray = Array.isArray(inventoryData) ? inventoryData : (inventoryData.data?.items || inventoryData.inventory || inventoryData.data || []);
        setInventory(inventoryArray);
        
        // Get event details for entries and activities
        const eventResponse = await fetch(API_CONFIG.ENDPOINTS.EVENT_BY_ID(selectedEventId), API_CONFIG.REQUEST_CONFIG);
        const eventData = await eventResponse.json();
        const eventDetails = eventData.data?.event || eventData.data || eventData;
        
        // Calculate total entries sold
        const entradasVendidas = (eventDetails.entradas || []).reduce((total, entrada) => {
          return total + (entrada.entradasVendidas || 0);
        }, 0);
        
        // Calculate total sales using the correct formula:
        // entradasVendidas * precio + (stockAsignado - stockActual) * precioUnitario + cuposOcupados * precioUnitario
        
        // 1. Calculate sales from entries (entradas vendidas)
        const ventasEntradas = (eventDetails.entradas || []).reduce((total, entrada) => {
          const entradasVendidas = entrada.entradasVendidas || 0;
          const precio = parseFloat(entrada.precio) || 0;
          return total + (entradasVendidas * precio);
        }, 0);
        
        // 2. Calculate sales from food and beverages (alimentos y bebidas)
        const ventasAlimentosBebestibles = inventoryArray.reduce((total, item) => {
          const stockAsignado = item.stockInicial || 0;
          const stockActual = item.stockActual || item.stock?.actual || stockAsignado; // Default to initial if no actual
          const precioUnitario = parseFloat(item.precioVenta) || 0;
          return total + ((stockAsignado - stockActual) * precioUnitario);
        }, 0);
        
        // 3. Calculate sales from activities (actividades)
        const ventasActividades = (eventDetails.actividades || []).reduce((total, actividad) => {
          const cuposOcupados = actividad.cuposOcupados || 0;
          const precioUnitario = parseFloat(actividad.precioUnitario) || 0;
          return total + (cuposOcupados * precioUnitario);
        }, 0);
        
        // Total sales calculation
        const totalVentas = ventasEntradas + ventasAlimentosBebestibles + ventasActividades;
        
        console.log('üìä Sales Breakdown:', {
          ventasEntradas,
          ventasAlimentosBebestibles,
          ventasActividades,
          totalVentas,
          entradas: eventDetails.entradas?.length || 0,
          inventario: inventoryArray.length,
          actividades: eventDetails.actividades?.length || 0
        });
        
        const ventasDelDia = Math.floor(totalVentas * 0.9);
        
        // Calculate detailed sales summaries for each category
        
        // 1. ENTRADAS SUMMARY
        const entradasSummary = {
          vendidas: entradasVendidas,
          disponibles: (eventDetails.entradas || []).reduce((total, entrada) => {
            return total + (entrada.cuposDisponibles || 0);
          }, 0),
          valorUnitarioPromedio: (eventDetails.entradas || []).length > 0 ? 
            (eventDetails.entradas || []).reduce((total, entrada) => {
              return total + (parseFloat(entrada.precio) || 0);
            }, 0) / (eventDetails.entradas || []).length : 0,
          totalVenta: ventasEntradas
        };
        
        // 2. ALIMENTOS Y BEBIDAS SUMMARY
        const alimentosBebidasSummary = {
          vendidas: inventoryArray.reduce((total, item) => {
            const stockAsignado = item.stockInicial || 0;
            const stockActual = item.stockActual || item.stock?.actual || stockAsignado;
            return total + (stockAsignado - stockActual);
          }, 0),
          disponibles: inventoryArray.reduce((total, item) => {
            return total + (item.stockActual || item.stock?.actual || item.stockInicial || 0);
          }, 0),
          valorUnitarioPromedio: inventoryArray.length > 0 ? 
            inventoryArray.reduce((total, item) => {
              return total + (parseFloat(item.precioVenta) || 0);
            }, 0) / inventoryArray.length : 0,
          totalVenta: ventasAlimentosBebestibles
        };
        
        // 3. ACTIVIDADES SUMMARY
        const actividadesSummary = {
          vendidas: (eventDetails.actividades || []).reduce((total, actividad) => {
            return total + (actividad.cuposOcupados || 0);
          }, 0),
          disponibles: (eventDetails.actividades || []).reduce((total, actividad) => {
            const cuposDisponibles = actividad.cuposDisponibles || 0;
            const cuposOcupados = actividad.cuposOcupados || 0;
            return total + (cuposDisponibles - cuposOcupados);
          }, 0),
          valorUnitarioPromedio: (eventDetails.actividades || []).length > 0 ? 
            (eventDetails.actividades || []).reduce((total, actividad) => {
              return total + (parseFloat(actividad.precioUnitario) || 0);
            }, 0) / (eventDetails.actividades || []).length : 0,
          totalVenta: ventasActividades
        };
        
        // Determinar el estado del evento usando la nueva funci√≥n
        const eventStatus = getEventStatus(selectedEvent);
         
         setDashboardData({
           totalVentas,
           ventasDelDia,
           entradasVendidas,
           entradasSummary,
           alimentosBebidasSummary,
           actividadesSummary,
           eventoActivo: eventStatus.status,
           eventStatus: eventStatus
         });
      } catch (error) {
        console.error('Error fetching dashboard data:', error);
                 setDashboardData({
           totalVentas: 0,
           ventasDelDia: 0,
           entradasVendidas: 0,
           entradasSummary: { vendidas: 0, disponibles: 0, valorUnitarioPromedio: 0, totalVenta: 0 },
           alimentosBebidasSummary: { vendidas: 0, disponibles: 0, valorUnitarioPromedio: 0, totalVenta: 0 },
           actividadesSummary: { vendidas: 0, disponibles: 0, valorUnitarioPromedio: 0, totalVenta: 0 },
           eventoActivo: 'programado',
           eventStatus: { status: 'programado', message: 'Evento programado', color: '#3B82F6' }
         });
      } finally {
        setLoading(false);
      }
    };

    const formatCurrency = (amount) => {
      return new Intl.NumberFormat('es-CL', {
        style: 'currency',
        currency: 'CLP',
        minimumFractionDigits: 0
      }).format(amount);
    };

    return (
      <Box sx={{ 
        bgcolor: '#F5F7FA', 
        minHeight: 'calc(100vh - 80px)',
        p: 4
      }}>

        <Box sx={{ mb: 4 }}>
          <Stack direction="row" alignItems="center" spacing={2}>
            <Box sx={{ 
              width: 12, 
              height: 12, 
              borderRadius: '50%', 
              bgcolor: dashboardData.eventStatus?.color || '#3B82F6'
            }} />
            <Typography variant="h6" sx={{ color: '#374151', fontWeight: 600 }}>
              {dashboardData.eventStatus?.status === 'por_comenzar' && dashboardData.eventStatus?.timeText ? (
                <>
                  Evento comenzar√° en <span style={{ fontWeight: 'bold', fontSize: '20px' }}>{dashboardData.eventStatus.timeText}</span>
                </>
              ) : (
                dashboardData.eventStatus?.message || 'Evento programado'
              )}
            </Typography>
            <Box sx={{ flexGrow: 1 }} />
            <Button 
              variant="contained" 
              startIcon={<ShareIcon />}
              sx={{ 
                background: 'linear-gradient(135deg, #1E293B 0%, #334155 100%) !important',
                '&:hover': { 
                  background: 'linear-gradient(135deg, #0F172A 0%, #1E293B 100%) !important'
                },
                textTransform: 'none',
                borderRadius: '8px',
                boxShadow: '0px 2px 4px rgba(30, 41, 59, 0.3)',
                color: 'white !important',
                fontWeight: 500,
                px: 3,
                py: 1,
                '&.MuiButton-root': {
                  background: 'linear-gradient(135deg, #1E293B 0%, #334155 100%) !important',
                  '&:hover': {
                    background: 'linear-gradient(135deg, #0F172A 0%, #1E293B 100%) !important'
                  }
                }
              }}
            >
              Compartir
            </Button>
          </Stack>
        </Box>


        <Stack direction="row" spacing={3} sx={{ mb: 4 }}>

          <Paper sx={{ 
            flex: 1, 
            p: 3, 
            borderRadius: '12px',
            boxShadow: '0px 2px 8px rgba(0, 0, 0, 0.1)'
          }}>
            <Stack direction="row" justifyContent="space-between" alignItems="flex-start">
              <Box>
                <Stack direction="row" alignItems="center" spacing={1} sx={{ mb: 1 }}>
                  <AttachMoneyIcon sx={{ color: '#6B7280', fontSize: '20px' }} />
                  <Typography variant="body2" sx={{ color: '#6B7280' }}>
                    Total de ventas
                  </Typography>
                </Stack>
                <Typography variant="h4" sx={{ color: '#374151', fontWeight: 700 }}>
                  {formatCurrency(dashboardData.totalVentas)}
                </Typography>
              </Box>
            </Stack>
          </Paper>


          <Paper sx={{ 
            flex: 1, 
            p: 3, 
            borderRadius: '12px',
            boxShadow: '0px 2px 8px rgba(0, 0, 0, 0.1)'
          }}>
            <Stack direction="row" justifyContent="space-between" alignItems="flex-start">
              <Box>
                <Stack direction="row" alignItems="center" spacing={1} sx={{ mb: 1 }}>
                  <DescriptionIcon sx={{ color: '#6B7280', fontSize: '20px' }} />
                  <Typography variant="body2" sx={{ color: '#6B7280' }}>
                    Ventas atribuibles del d√≠a
                  </Typography>
                </Stack>
                <Typography variant="h4" sx={{ color: '#374151', fontWeight: 700 }}>
                  {formatCurrency(dashboardData.ventasDelDia)}
                </Typography>
              </Box>
            </Stack>
          </Paper>


          <Paper sx={{ 
            flex: 1, 
            p: 3, 
            borderRadius: '12px',
            boxShadow: '0px 2px 8px rgba(0, 0, 0, 0.1)'
          }}>
            <Stack direction="row" justifyContent="space-between" alignItems="flex-start">
              <Box>
                <Stack direction="row" alignItems="center" spacing={1} sx={{ mb: 1 }}>
                  <PersonIcon sx={{ color: '#6B7280', fontSize: '20px' }} />
                  <Typography variant="body2" sx={{ color: '#6B7280' }}>
                    Entradas vendidas
                  </Typography>
                </Stack>
                <Typography variant="h4" sx={{ color: '#374151', fontWeight: 700 }}>
                  {dashboardData.entradasVendidas}
                </Typography>
              </Box>
            </Stack>
          </Paper>
        </Stack>


         <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'flex-start' }}>

           <Box sx={{ display: 'flex', flexDirection: 'column', width: '100%', mr: 3 }}>
             <Typography variant="h6" sx={{ color: '#374151', mb: 3, fontWeight: 600 }}>
               Resumen de Ventas
             </Typography>
             
             {/* ENTRADAS */}
             <Paper sx={{ 
               p: 3, 
               borderRadius: '12px',
               boxShadow: '0px 2px 8px rgba(0, 0, 0, 0.1)',
               mb: 3,
               border: '1px solid #E5E7EB'
             }}>
               <Typography variant="h6" sx={{ color: '#374151', mb: 2, fontWeight: 600, display: 'flex', alignItems: 'center' }}>
                 üé´ Entradas
                       </Typography>
               <Box sx={{ display: 'grid', gridTemplateColumns: '1fr 1fr 1fr 1fr', gap: 3 }}>
                 <Box>
                   <Typography variant="body2" sx={{ color: '#6B7280', mb: 0.5 }}>Vendidas</Typography>
                   <Typography variant="h5" sx={{ color: '#059669', fontWeight: 700 }}>
                     {dashboardData.entradasSummary.vendidas}
                       </Typography>
                 </Box>
                 <Box>
                   <Typography variant="body2" sx={{ color: '#6B7280', mb: 0.5 }}>Disponibles</Typography>
                   <Typography variant="h5" sx={{ color: '#374151', fontWeight: 700 }}>
                     {dashboardData.entradasSummary.disponibles}
                   </Typography>
                 </Box>
                 <Box>
                   <Typography variant="body2" sx={{ color: '#6B7280', mb: 0.5 }}>Valor Promedio</Typography>
                   <Typography variant="h5" sx={{ color: '#374151', fontWeight: 700 }}>
                     {formatCurrency(dashboardData.entradasSummary.valorUnitarioPromedio)}
                   </Typography>
                 </Box>
                 <Box>
                   <Typography variant="body2" sx={{ color: '#6B7280', mb: 0.5 }}>Total Venta</Typography>
                   <Typography variant="h5" sx={{ color: '#059669', fontWeight: 700 }}>
                     {formatCurrency(dashboardData.entradasSummary.totalVenta)}
                   </Typography>
                 </Box>
               </Box>
             </Paper>

             {/* ALIMENTOS Y BEBIDAS */}
             <Paper sx={{ 
               p: 3, 
               borderRadius: '12px',
               boxShadow: '0px 2px 8px rgba(0, 0, 0, 0.1)',
               mb: 3,
               border: '1px solid #E5E7EB'
             }}>
               <Typography variant="h6" sx={{ color: '#374151', mb: 2, fontWeight: 600, display: 'flex', alignItems: 'center' }}>
                 üçï Alimentos y Bebidas
                   </Typography>
               
               {/* Totals Summary */}
               <Box sx={{ display: 'grid', gridTemplateColumns: '1fr 1fr 1fr 1fr', gap: 3, mb: 3, p: 2, bgcolor: '#F9FAFB', borderRadius: '8px' }}>
                 <Box>
                   <Typography variant="body2" sx={{ color: '#6B7280', mb: 0.5 }}>Total Vendidas</Typography>
                   <Typography variant="h6" sx={{ color: '#059669', fontWeight: 700 }}>
                     {dashboardData.alimentosBebidasSummary.vendidas}
                   </Typography>
                 </Box>
                 <Box>
                   <Typography variant="body2" sx={{ color: '#6B7280', mb: 0.5 }}>Total Disponibles</Typography>
                   <Typography variant="h6" sx={{ color: '#374151', fontWeight: 700 }}>
                     {dashboardData.alimentosBebidasSummary.disponibles}
                   </Typography>
                 </Box>
                 <Box>
                   <Typography variant="body2" sx={{ color: '#6B7280', mb: 0.5 }}>Valor Promedio</Typography>
                   <Typography variant="h6" sx={{ color: '#374151', fontWeight: 700 }}>
                     {formatCurrency(dashboardData.alimentosBebidasSummary.valorUnitarioPromedio)}
                   </Typography>
                 </Box>
                 <Box>
                   <Typography variant="body2" sx={{ color: '#6B7280', mb: 0.5 }}>Total Venta</Typography>
                   <Typography variant="h6" sx={{ color: '#059669', fontWeight: 700 }}>
                     {formatCurrency(dashboardData.alimentosBebidasSummary.totalVenta)}
                   </Typography>
                 </Box>
               </Box>

               {/* Individual Items List */}
               <Box>
                 <Typography variant="subtitle1" sx={{ color: '#374151', mb: 2, fontWeight: 600 }}>
                   Detalle por Producto
                 </Typography>
                 <Box sx={{ display: 'grid', gridTemplateColumns: '2fr 1fr 1fr 1fr 1fr', gap: 2, mb: 1, p: 1, bgcolor: '#F3F4F6', borderRadius: '6px' }}>
                   <Typography variant="body2" sx={{ color: '#6B7280', fontWeight: 600 }}>Producto</Typography>
                   <Typography variant="body2" sx={{ color: '#6B7280', fontWeight: 600, textAlign: 'center' }}>Vendidas</Typography>
                   <Typography variant="body2" sx={{ color: '#6B7280', fontWeight: 600, textAlign: 'center' }}>Disponibles</Typography>
                   <Typography variant="body2" sx={{ color: '#6B7280', fontWeight: 600, textAlign: 'center' }}>Precio</Typography>
                   <Typography variant="body2" sx={{ color: '#6B7280', fontWeight: 600, textAlign: 'center' }}>Subtotal</Typography>
                 </Box>
                 {inventory && inventory.length > 0 ? inventory.map((item, index) => {
                   const stockAsignado = item.stockInicial || 0;
                   const stockActual = item.stockActual || item.stock?.actual || stockAsignado;
                   const vendidas = stockAsignado - stockActual;
                   const precio = parseFloat(item.precioVenta) || 0;
                   const subtotal = vendidas * precio;
                   
                   return (
                     <Box key={index} sx={{ display: 'grid', gridTemplateColumns: '2fr 1fr 1fr 1fr 1fr', gap: 2, py: 1, borderBottom: '1px solid #E5E7EB' }}>
                       <Typography variant="body2" sx={{ color: '#374151' }}>
                         {item.nombreProducto || item.nombre || 'Sin nombre'}
                       </Typography>
                       <Typography variant="body2" sx={{ color: '#059669', fontWeight: 600, textAlign: 'center' }}>
                         {vendidas}
                       </Typography>
                       <Typography variant="body2" sx={{ color: '#374151', textAlign: 'center' }}>
                         {stockActual}
                       </Typography>
                       <Typography variant="body2" sx={{ color: '#374151', textAlign: 'center' }}>
                         {formatCurrency(precio)}
                       </Typography>
                       <Typography variant="body2" sx={{ color: '#059669', fontWeight: 600, textAlign: 'center' }}>
                         {formatCurrency(subtotal)}
                       </Typography>
                     </Box>
                   );
                 }) : (
                   <Box sx={{ textAlign: 'center', py: 3, color: '#6B7280' }}>
                     <Typography variant="body2">No hay productos disponibles</Typography>
                   </Box>
                 )}
               </Box>
             </Paper>

             {/* ACTIVIDADES */}
             <Paper sx={{ 
               p: 3, 
               borderRadius: '12px',
               boxShadow: '0px 2px 8px rgba(0, 0, 0, 0.1)',
               mb: 3,
               border: '1px solid #E5E7EB'
             }}>
               <Typography variant="h6" sx={{ color: '#374151', mb: 2, fontWeight: 600, display: 'flex', alignItems: 'center' }}>
                 üéØ Actividades
               </Typography>
               
               {/* Totals Summary */}
               <Box sx={{ display: 'grid', gridTemplateColumns: '1fr 1fr 1fr 1fr', gap: 3, mb: 3, p: 2, bgcolor: '#F9FAFB', borderRadius: '8px' }}>
                 <Box>
                   <Typography variant="body2" sx={{ color: '#6B7280', mb: 0.5 }}>Total Vendidas</Typography>
                   <Typography variant="h6" sx={{ color: '#059669', fontWeight: 700 }}>
                     {dashboardData.actividadesSummary.vendidas}
                   </Typography>
                 </Box>
                 <Box>
                   <Typography variant="body2" sx={{ color: '#6B7280', mb: 0.5 }}>Total Disponibles</Typography>
                   <Typography variant="h6" sx={{ color: '#374151', fontWeight: 700 }}>
                     {dashboardData.actividadesSummary.disponibles}
                   </Typography>
                 </Box>
                 <Box>
                   <Typography variant="body2" sx={{ color: '#6B7280', mb: 0.5 }}>Valor Promedio</Typography>
                   <Typography variant="h6" sx={{ color: '#374151', fontWeight: 700 }}>
                     {formatCurrency(dashboardData.actividadesSummary.valorUnitarioPromedio)}
                   </Typography>
                 </Box>
                 <Box>
                   <Typography variant="body2" sx={{ color: '#6B7280', mb: 0.5 }}>Total Venta</Typography>
                   <Typography variant="h6" sx={{ color: '#059669', fontWeight: 700 }}>
                     {formatCurrency(dashboardData.actividadesSummary.totalVenta)}
                   </Typography>
                 </Box>
               </Box>

               {/* Individual Activities List */}
               <Box>
                 <Typography variant="subtitle1" sx={{ color: '#374151', mb: 2, fontWeight: 600 }}>
                   Detalle por Actividad
                 </Typography>
                 <Box sx={{ display: 'grid', gridTemplateColumns: '2fr 1fr 1fr 1fr 1fr', gap: 2, mb: 1, p: 1, bgcolor: '#F3F4F6', borderRadius: '6px' }}>
                   <Typography variant="body2" sx={{ color: '#6B7280', fontWeight: 600 }}>Actividad</Typography>
                   <Typography variant="body2" sx={{ color: '#6B7280', fontWeight: 600, textAlign: 'center' }}>Ocupados</Typography>
                   <Typography variant="body2" sx={{ color: '#6B7280', fontWeight: 600, textAlign: 'center' }}>Disponibles</Typography>
                   <Typography variant="body2" sx={{ color: '#6B7280', fontWeight: 600, textAlign: 'center' }}>Precio</Typography>
                   <Typography variant="body2" sx={{ color: '#6B7280', fontWeight: 600, textAlign: 'center' }}>Subtotal</Typography>
                 </Box>
                 {selectedEvent?.actividades && selectedEvent.actividades.length > 0 ? selectedEvent.actividades.map((actividad, index) => {
                   const cuposOcupados = actividad.cuposOcupados || 0;
                   const cuposDisponibles = actividad.cuposDisponibles || 0;
                   const cuposRestantes = cuposDisponibles - cuposOcupados;
                   const precio = parseFloat(actividad.precioUnitario) || 0;
                   const subtotal = cuposOcupados * precio;
                   
                   return (
                     <Box key={index} sx={{ display: 'grid', gridTemplateColumns: '2fr 1fr 1fr 1fr 1fr', gap: 2, py: 1, borderBottom: '1px solid #E5E7EB' }}>
                       <Typography variant="body2" sx={{ color: '#374151' }}>
                         {actividad.nombreActividad || 'Sin nombre'}
                       </Typography>
                       <Typography variant="body2" sx={{ color: '#059669', fontWeight: 600, textAlign: 'center' }}>
                         {cuposOcupados}
                       </Typography>
                       <Typography variant="body2" sx={{ color: '#374151', textAlign: 'center' }}>
                         {cuposRestantes}
                       </Typography>
                       <Typography variant="body2" sx={{ color: '#374151', textAlign: 'center' }}>
                         {formatCurrency(precio)}
                       </Typography>
                       <Typography variant="body2" sx={{ color: '#059669', fontWeight: 600, textAlign: 'center' }}>
                         {formatCurrency(subtotal)}
                       </Typography>
                     </Box>
                   );
                 }) : (
                   <Box sx={{ textAlign: 'center', py: 3, color: '#6B7280' }}>
                     <Typography variant="body2">No hay actividades disponibles</Typography>
                   </Box>
                 )}
               </Box>
             </Paper>
           </Box>


           <Box sx={{ display: 'flex', flexDirection: 'column', alignItems: 'center' }}>
             <Typography variant="h6" sx={{ color: '#374151', mb: 2, fontWeight: 600, textAlign: 'center' }}>
               Calendario
             </Typography>
             <Paper sx={{ 
               width: 337,
               height: 320,
               p: 2, 
               borderRadius: '10px',
               boxShadow: '0px 2px 8px rgba(0, 0, 0, 0.1)',
               display: 'flex',
               flexDirection: 'column'
             }}>
               <CalendarComponent selectedEventId={selectedEventId} />
             </Paper>
                      </Box>
         </Box>


         <Box sx={{ mt: 4 }}>
           <Stack direction="row" justifyContent="space-between" alignItems="center" sx={{ mb: 3 }}>
             <Typography variant="h6" sx={{ color: '#374151', fontWeight: 600 }}>
               Productos Agendables
             </Typography>
             <Button 
               variant="contained" 
               startIcon={<AddIcon />}
               sx={{ 
                 background: 'linear-gradient(135deg, #1E293B 0%, #334155 100%) !important',
                 '&:hover': { 
                   background: 'linear-gradient(135deg, #0F172A 0%, #1E293B 100%) !important'
                 },
                 textTransform: 'none',
                 borderRadius: '8px',
                 boxShadow: '0px 2px 4px rgba(30, 41, 59, 0.3)',
                 color: 'white !important',
                 fontWeight: 500,
                 '&.MuiButton-root': {
                   background: 'linear-gradient(135deg, #1E293B 0%, #334155 100%) !important',
                   '&:hover': {
                     background: 'linear-gradient(135deg, #0F172A 0%, #1E293B 100%) !important'
                   }
                 }
               }}
             >
               Crear agendamiento
             </Button>
           </Stack>

           <Paper sx={{ 
             p: 3, 
             borderRadius: '12px',
             boxShadow: '0px 2px 8px rgba(0, 0, 0, 0.1)'
           }}>
             <Box sx={{ 
               display: 'grid', 
               gridTemplateColumns: '1fr 1fr 1fr 1fr 1fr 1fr 60px',
               gap: '16px 24px',
               alignItems: 'center',
               mb: 2,
               pb: 2,
               borderBottom: '1px solid #E5E7EB',
               bgcolor: '#F9FAFB',
               borderRadius: '8px 8px 0 0',
               px: 2,
               py: 1.5
             }}>
               <Typography variant="body2" sx={{ color: '#6B7280', fontWeight: 600 }}>
                 Tipo
               </Typography>
               <Typography variant="body2" sx={{ color: '#6B7280', fontWeight: 600, textAlign: 'right' }}>
                 Cupos en total
               </Typography>
               <Typography variant="body2" sx={{ color: '#6B7280', fontWeight: 600, textAlign: 'right' }}>
                 Cupos usados
               </Typography>
               <Typography variant="body2" sx={{ color: '#6B7280', fontWeight: 600, textAlign: 'right' }}>
                 Cupos validados
               </Typography>
               <Typography variant="body2" sx={{ color: '#6B7280', fontWeight: 600, textAlign: 'right' }}>
                 Cupos sin usar
               </Typography>
               <Typography variant="body2" sx={{ color: '#6B7280', fontWeight: 600, textAlign: 'right' }}>
                 Anulados
               </Typography>
               <Box></Box>
             </Box>


             {inventory && inventory.length > 0 ? (showAllAgendables ? inventory : inventory.slice(0, 3)).map((item, index) => (
               <Box key={item.id || index} sx={{ 
                 display: 'grid', 
                 gridTemplateColumns: '1fr 1fr 1fr 1fr 1fr 1fr 60px',
                 gap: '16px 24px',
                 alignItems: 'center',
                 py: 2,
                 borderBottom: index < inventory.length - 1 ? '1px solid #F3F4F6' : 'none'
               }}>
                 <Typography variant="body1" sx={{ color: '#374151' }}>
                   {item.nombreProducto || item.nombre || 'Sin nombre'}
                 </Typography>
                 <Typography variant="body1" sx={{ color: '#374151', fontWeight: 600, textAlign: 'right' }}>
                   {item.stockInicial || 0}
                 </Typography>
                 <Typography variant="body1" sx={{ color: '#3B82F6', textDecoration: 'underline', textAlign: 'right' }}>
                   0
                 </Typography>
                 <Typography variant="body1" sx={{ color: '#3B82F6', textDecoration: 'underline', textAlign: 'right' }}>
                   0
                 </Typography>
                 <Typography variant="body1" sx={{ color: '#374151', textAlign: 'right' }}>
                   {item.stockInicial || 0}
                 </Typography>
                 <Typography variant="body1" sx={{ color: '#374151', textAlign: 'right' }}>
                   0
                 </Typography>
                 <IconButton size="small" sx={{ color: '#6B7280' }}>
                   <EditIcon fontSize="small" />
                 </IconButton>
               </Box>
             )) : (
               <Box sx={{ 
                 display: 'flex', 
                 justifyContent: 'center', 
                 alignItems: 'center', 
                 py: 4,
                 color: '#6B7280'
               }}>
                 <Typography variant="body2">
                   No hay productos agendables disponibles
                 </Typography>
               </Box>
             )}

             {inventory && inventory.length > 3 && (
               <Button 
                 variant="text" 
                 endIcon={showAllAgendables ? <KeyboardArrowDownIcon sx={{ transform: 'rotate(180deg)' }} /> : <KeyboardArrowDownIcon />}
                 onClick={() => setShowAllAgendables(!showAllAgendables)}
                 sx={{ 
                   mt: 2, 
                   color: '#6B7280',
                   textTransform: 'none'
                 }}
               >
                 {showAllAgendables ? 'Ver menos' : `Ver todos los agendables (${inventory.length})`}
               </Button>
             )}
           </Paper>
         </Box>


         <Box sx={{ mt: 4 }}>
           <Stack direction="row" alignItems="center" sx={{ mb: 3 }}>
             <Typography variant="h6" sx={{ color: '#374151', fontWeight: 600 }}>
               Historial de eventos pasados
             </Typography>
           </Stack>

           <Paper sx={{ 
             p: 3, 
             borderRadius: '12px',
             boxShadow: '0px 2px 8px rgba(0, 0, 0, 0.1)'
           }}>
             <Box sx={{ 
               display: 'grid', 
               gridTemplateColumns: '1fr 1fr 1fr 1fr 1fr auto',
               gap: '16px 24px',
               alignItems: 'center',
               mb: 2,
               pb: 2,
               borderBottom: '1px solid #E5E7EB',
               bgcolor: '#F9FAFB',
               borderRadius: '8px 8px 0 0',
               px: 2,
               py: 1.5
             }}>
               <Typography variant="body2" sx={{ color: '#6B7280', fontWeight: 600 }}>
                 Cliente
               </Typography>
               <Typography variant="body2" sx={{ color: '#6B7280', fontWeight: 600 }}>
                 Rut de empresa
               </Typography>
               <Typography variant="body2" sx={{ color: '#6B7280', fontWeight: 600 }}>
                 Nombre
               </Typography>
               <Typography variant="body2" sx={{ color: '#6B7280', fontWeight: 600 }}>
                 Correo
               </Typography>
               <Typography variant="body2" sx={{ color: '#6B7280', fontWeight: 600 }}>
                 Fecha
               </Typography>
               <Box></Box>
             </Box>

             <Box sx={{ 
               display: 'flex', 
               justifyContent: 'center', 
               alignItems: 'center', 
               py: 6,
               color: '#6B7280'
             }}>
               <Typography variant="body1">
                 No hay registros disponibles
               </Typography>
             </Box>

             <Button 
               variant="text" 
               endIcon={<KeyboardArrowDownIcon />}
               sx={{ 
                 mt: 2, 
                 color: '#6B7280',
                 textTransform: 'none'
               }}
             >
               Ver todos los eventos
             </Button>
           </Paper>
         </Box>
       </Box>
     );
   };

  return (
    <Box sx={{ minHeight: '100vh', bgcolor: '#F5F7FA' }}>
      <Header />
      <EventSelector />
      
      {showAddInventoryForm ? (
        <AddInventoryForm 
          inventoryFormData={inventoryFormData}
          handleInventoryFormChange={handleInventoryFormChange}
          onCancel={() => {
            setShowAddInventoryForm(false);
            // Limpiar el formulario al cancelar
            setInventoryFormData({
              nombreProducto: '',
              categoria: '',
              descripcion: '',
              skuCodigoInterno: '',
              precioVenta: '',
              stockInicialDisponible: '',
              imagenProducto: null
            });
          }}
          selectedEventId={selectedEventId}
        />
      ) : showEditInventoryForm ? (
        <AddInventoryForm 
          inventoryFormData={inventoryFormData}
          handleInventoryFormChange={handleInventoryFormChange}
          createInventory={updateInventory}
          createInventoryLoading={createInventoryLoading}
          onCancel={() => {
            setShowEditInventoryForm(false);
            setEditingInventory(null);
            setInventoryFormData({
              nombreProducto: '',
              categoria: '',
              descripcion: '',
              skuCodigoInterno: '',
              precioVenta: '',
              stockInicialDisponible: '',
              imagenProducto: null
            });
          }}
          isEditing={true}
          selectedEventId={selectedEventId}
        />
      ) : showAddUserForm ? (
        <AddUserForm 
          userFormData={userFormData}
          handleUserFormChange={handleUserFormChange}
          createUser={createUser}
          createUserLoading={createUserLoading}
          onCancel={() => setShowAddUserForm(false)}
        />
      ) : showEditUserForm ? (
        <AddUserForm 
          userFormData={userFormData}
          handleUserFormChange={handleUserFormChange}
          createUser={updateUser}
          createUserLoading={createUserLoading}
          onCancel={() => {
            setShowEditUserForm(false);
            setEditingUser(null);
            setUserFormData({
              nombreCompleto: '',
              correoElectronico: '',
              rutOId: '',
              telefonoContacto: '',
              rol: 'Administrador'
            });
          }}
          isEditing={true}
        />
      ) : (
        <>
          {activeView === 'dashboard' && <DashboardView />}
          {activeView === 'usuarios' && <Usuarios onAddUser={() => {
            // Limpiar el formulario antes de abrirlo
            setUserFormData({
              nombreCompleto: '',
              correoElectronico: '',
              rutOId: '',
              telefonoContacto: '',
              rol: 'Administrador'
            });
            setShowAddUserForm(true);
          }} onEditUser={handleEditUser} selectedEventId={selectedEventId} />}
          {activeView === 'inventario' && <Inventario onAddInventory={() => {
            // Limpiar el formulario antes de abrirlo
            setInventoryFormData({
              nombreProducto: '',
              categoria: '',
              descripcion: '',
              skuCodigoInterno: '',
              precioVenta: '',
              stockInicialDisponible: '',
              imagenProducto: null
            });
            setShowAddInventoryForm(true);
          }} onEditInventory={handleEditInventory} selectedEventId={selectedEventId} />}
        </>
      )}


      <Dialog
        open={showUserSuccessModal}
        onClose={() => setShowUserSuccessModal(false)}
        maxWidth="sm"
        fullWidth
      >
        <DialogTitle sx={{ textAlign: 'center', color: 'success.main', fontWeight: 600 }}>
          üéâ ¬°Usuario creado exitosamente!
        </DialogTitle>
        <DialogContent>
          <Typography sx={{ textAlign: 'center', color: 'grey.600' }}>
            El usuario "{createdUserName}" ha sido creado correctamente.
          </Typography>
        </DialogContent>
        <DialogActions sx={{ justifyContent: 'center', pb: 3 }}>
          <Button 
            onClick={() => setShowUserSuccessModal(false)}
            variant="contained"
            color="success"
            size="large"
            sx={{
              px: 4,
              borderRadius: '8px',
              textTransform: 'none',
              fontWeight: 500
            }}
          >
            Aceptar
          </Button>
        </DialogActions>
      </Dialog>


      <Dialog
        open={showUserErrorModal}
        onClose={() => setShowUserErrorModal(false)}
        maxWidth="sm"
        fullWidth
      >
        <DialogTitle sx={{ textAlign: 'center', color: 'error.main', fontWeight: 600 }}>
          ‚ùå Error al crear usuario
        </DialogTitle>
        <DialogContent>
          <Typography sx={{ textAlign: 'center', color: 'grey.600' }}>
            {userErrorMessage}
          </Typography>
        </DialogContent>
        <DialogActions sx={{ justifyContent: 'center', pb: 3 }}>
          <Button 
            onClick={() => setShowUserErrorModal(false)}
            variant="contained"
            color="error"
            size="large"
            sx={{
              px: 4,
              borderRadius: '8px',
              textTransform: 'none',
              fontWeight: 500
            }}
          >
            Aceptar
          </Button>
        </DialogActions>
      </Dialog>
    </Box>
  );
};

export default EventAdminDashboard;